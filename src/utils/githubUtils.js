// gets the base branch (main/ master)
export const getBaseBranch = async (octokitClient, owner, repoName) => {
  console.log("Getting the base branch: ");
  try {
    const { data: repoData } = await octokitClient.repos.get({
      owner,
      repo: repoName,
    });
    return repoData?.default_branch;
  } catch (error) {
    console.log("Error Getting Base Branch");
    return;
  }
};

// Getting the SHA of the last commit after which we want to commit
export const getLatestCommitSHA = async (octokitClient, owner, repoName, baseBranch) => {
  try {
    console.log("Getting the last head of main branch: ");
    const { data: refData } = await octokitClient.rest.git.getRef({
      owner: owner,
      repo: repoName,
      ref: `heads/${baseBranch}`, // e.g., 'heads/main' or 'heads/master'
    });
    return refData?.object?.sha;
  } catch (error) {
    console.log("Error Getting latest commit SHA");
  }
};

// Creating a new branch off the current commit SHA
export const creatingNewBranch = async (octokitClient, owner, repoName, newBranchName, commitSha) => {
  try {
    console.log("Creating a new Branch: ");
    const newBranchName = `docbot/docs-${Date.now()}`;
    const { data: newRef } = await octokitClient.git.createRef({
      owner,
      repo: repoName,
      ref: `refs/heads/${newBranchName}`,
      sha: commitSha,
    });
    return newRef?.object?.sha;
  } catch (error) {
    console.log("Error Creating New Branch");
  }
};

// Create Document to be committed
// TODO: create a separate function to populate docContent where there is an AI call

export const createDocument = async (octokitClient, owner, repoName, docContent) => {
  try {
    console.log("Creating Document ");
    // Default value for testing
    // const docContent = `# Auto-Generated Documentation\n\nGenerated by @docbot on ${new Date().toISOString()}`;
    const { data: blobData } = await octokitClient.git.createBlob({
      owner,
      repo: repoName,
      content: docContent,
      encoding: "utf-8",
    });
    return blobData;
  } catch (error) {
    console.log("Error Creating Blob");
  }
};

// -- createTree followed by createCommit
export const createTree = async (octokitClient, owner, repoName, newTreeSha, blobData) => {
  try {
    console.log("Creating new Tree ");
    const { data: newTree } = await octokitClient.git.createTree({
      owner: owner,
      repo: repoName,
      base_tree: newTreeSha, // base is the latest commit's tree
      tree: [
        {
          path: "README.md",
          mode: "100644",
          type: "blob",
          sha: blobData?.sha,
        },
      ],
    });
    return newTree;
  } catch (error) {
    console.log("Error Creating Tree");
  }
};

// Create a pull Request
export const createPR = async (
  octokitClient,
  owner,
  repoName,
  issueNumber,
  newBranchName,
  baseBranch,
  title = "Dummy Title"
) => {
  try {
    // Create a pull Request
    console.log("Creating Pull Request");

    await octokitClient.request("POST /repos/{owner}/{repo}/pulls", {
      owner,
      repo: repoName,
      issue_number: issueNumber,
      head: newBranchName,
      base: baseBranch,
      title: title,
    });
    console.log("PR Created!");
  } catch (error) {
    console.log(error);
  }
};
