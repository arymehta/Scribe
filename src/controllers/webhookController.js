import { getMarkdownContent, parseRequest } from "../utils/parserUtils.js";
import { commentOnIssue, detectMergePR, createCommit, checkPermissions } from "../utils/githubUtils.js";
import {
  botName,
  APP_NAME,
  invalidCommandFormat,
  invalidPermissions,
  generationSuccess,
} from "../constants/comments.js";
import { checkCommandFormat, formatPath } from "../helpers/helpers.js";

export const RouteWebhookRequest = async (req, res) => {
  const event = req?.headers["x-github-event"];
  const action = req?.body?.action;
  try {
    const { octokitClient, owner, repoName, author } = parseRequest(req);

    // If the request was generated by the bot, ignore
    // Should only respond to requests generated by user actions
    if (author?.toLowerCase().startsWith(APP_NAME)) {
      return res.sendStatus(200);
    }

    if ((event === "issues" && action === "opened") || (event === "issue_comment" && action === "created")) {
      const issueBody = req?.body?.comment?.body?.trim() || req?.body?.issue?.body?.trim() || "";

      // Ignore normal comments not mentioning the bot
      if (!issueBody.toLowerCase().startsWith(botName)) {
        return res.sendStatus(200);
      }

      const match = checkCommandFormat(issueBody);

      if (!match) {
        await commentOnIssue(req, octokitClient, invalidCommandFormat);
        return res.status(401).json({ message: "Invalid " });
      }

      const [action, safePath] = formatPath(match);

      switch (action) {
        case "doc":
          try {
            const allowed = await checkPermissions(req, octokitClient);
            if (!allowed) throw new Error(invalidPermissions);
            else {
              await generateDocumentation(req, octokitClient, owner, repoName, safePath);
              return res.status(200).json({ message: "PR Created! " });
            }
          } catch (error) {
            const errMsg = error?.message || "Bot ran into an Error";
            await commentOnIssue(req, octokitClient, errMsg);
          }
          break;

        default:
          return res.status(400).json({ message: "You have suffered Aura Loss" });
      }
      return res.status(200).json({ message: "Successfull" });
    } else if (event === "pull_request" && action === "closed") {
      await detectMergePR(req, octokitClient);
    }
  } catch (error) {
    console.log(error);
    return res.status(500).json({ message: "An Error Occured" });
  }
};

const generateDocumentation = async (req, octokitClient, owner, repoName, safePath) => {
  // default comment to acknowledge the user that the bot has started its work.
  await commentOnIssue(req, octokitClient);

  // get documentation content from LLM call
  const docContent = await getMarkdownContent(req, octokitClient, owner, repoName, safePath);
  // const docContent = "#### Sample Content" // TESTING
  // Creating a Commit
  await createCommit(req, octokitClient, docContent, safePath);
  // Notifying the user that its completed
  await commentOnIssue(req, octokitClient, generationSuccess);
};
